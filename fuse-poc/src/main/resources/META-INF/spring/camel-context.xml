<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
							http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
							http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
							http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">


	<jdbc:embedded-database id="dataSource" type="DERBY">
        <jdbc:script location="classpath:sql/init.sql"/>
    </jdbc:embedded-database>
    
    <cxf:cxfEndpoint id="crmEndpoint"
                   address="http://localhost:9000/crm/"
                   serviceClass="com.tmg.fuse.poc.CRMEndpoint"/>
                   
    
    <cxf:cxfEndpoint id="pspEndpoint"
                   address="http://localhost:9001/psp/"
                   serviceClass="com.tmg.fuse.poc.PSPEndpoint"/>
    

	<!--  Set up the JMS Configuration-->
	<bean id="jms" class="org.apache.camel.component.jms.JmsComponent"> 
	  <property name="configuration" ref="jmsConfig" />
	 </bean>	
	  
	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration" >
	  <property name="connectionFactory" ref="jmsPooledConnectionFactory" /> 
	  <property name="transacted" value="true" /> 
	  <property name="transactionManager" ref="jmsTransactionManager" />
	  <property name="cacheLevelName" value="CACHE_CONSUMER" />
	 </bean>
	
	<bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
	  <property name="connectionFactory" ref="jmsPooledConnectionFactory" />
	 </bean>           
	
	<bean id="jmsPooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
	      init-method="start" destroy-method="stop" >
	  <property name="maxConnections" value="2" />
	  <property name="connectionFactory" ref="jmsConnectionFactory" />
	 </bean> 
	
	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory"> 
	  <property name="brokerURL" value="tcp://localhost:61617" /> 
	  <property name="watchTopicAdvisories" value="false" />
	</bean>
	<!--  End of JMS Configuration -->

	<!--  Set up the Rest Resources -->
    <cxf:rsServer id="rsServer" address="http://localhost:9090/route" serviceClass="com.tmg.fuse.poc.AccountResource"/>

	<!--  Set up beans to assist with POC -->
    <bean id="accountprocessor" class="com.tmg.fuse.poc.AccountProcessor"/>

	<!-- Camel Context Definition -->
	<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
    <route>
        <from uri="cxfrs://http://localhost:9090/route?resourceClasses=com.tmg.fuse.poc.AccountResource"/>
        <process ref="accountprocessor"/>
        <log message="Executing SQL: ${body}"/>
        <to uri="jdbc:dataSource"/>
        <choice>
            <when>
                <simple>${in.header.operationName} regex 'retrieveAccount'</simple>
                <log message="Retrieving account from CRM"/>
                <to uri="xslt:xsl/transformToCRM.xsl"/>
            </when>
            <when>
                <simple>${in.header.operationName} regex 'createAccount'</simple>
                <log message="Putting createAccount message on topic"/>
                <to uri="activemq:topic:accountTopic"/>
            </when>
            <otherwise>
            	<log message="Incorrect request"/>
            </otherwise>
        </choice>
    </route>
    
    <route>
      <!-- route starts from the cxf webservice, see camel-cxf.xml for details -->
      <from uri="cxf:bean:crmEndpoint" />
      <to uri="seda:incomingOrders" />
      <!-- and then create the OK reply for the webservice which is still waiting for a reply -->
      <transform>
        <constant>OK</constant>
      </transform>
    </route>
  
    <!-- test route -->
    <route>
      <from uri="seda:incomingOrders" />
      <to uri="mock:end"/>
    </route>
    
    
    
</camelContext>
</beans>